/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import ExceptionHandlers.LoginException;
import database.Database;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import mailSender.MailSender;
import model.UserData;


/**
 *
 * @author student
 */
public class Main_gui extends javax.swing.JFrame {
    
    private Database db;
    private UserData user;
    private Boolean isItemChanged = false;

    /**
     * Creates new form Main_gui
     */
    public Main_gui() {
        initComponents();
        close_connection_button.setVisible(false);
        schema_combo_box.removeAllItems();
        schema_combo_box.setVisible(false);
        email_container.setVisible(false);
        send_mails_button.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connect_button = new javax.swing.JButton();
        username_input = new javax.swing.JTextField();
        ip_input = new javax.swing.JTextField();
        port_input = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        password_input = new javax.swing.JPasswordField();
        close_connection_button = new javax.swing.JButton();
        tab_pane = new javax.swing.JTabbedPane();
        schema_combo_box = new javax.swing.JComboBox<>();
        send_mails_button = new javax.swing.JButton();
        email_container = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1200, 800));

        connect_button.setText("Connect");
        connect_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connect_buttonMouseClicked(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        jLabel3.setText("Ip");

        jLabel4.setText("Port");

        password_input.setMinimumSize(new java.awt.Dimension(15, 24));

        close_connection_button.setText("Close connection");
        close_connection_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_connection_buttonActionPerformed(evt);
            }
        });

        schema_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        schema_combo_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schema_combo_boxActionPerformed(evt);
            }
        });

        send_mails_button.setText("Send mails");
        send_mails_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_mails_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(ip_input, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(port_input, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(connect_button))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(email_container, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(send_mails_button)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(schema_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tab_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(close_connection_button)))))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connect_button)
                    .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ip_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schema_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(email_container)
                    .addComponent(tab_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close_connection_button)
                    .addComponent(send_mails_button))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connect_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connect_buttonMouseClicked
       if(checkInputFields()){
           setDatabaseConnection();
       }
    }//GEN-LAST:event_connect_buttonMouseClicked

    private void setDatabaseConnection(){
         try {
            db = new Database(user);

            
            //buttons visibility
            close_connection_button.setVisible(true);
            connect_button.setVisible(false);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch(LoginException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage(), "alert", JOptionPane.ERROR_MESSAGE);
            return;
        }
         
        
        tab_pane.setVisible(true);
        
        //combo box
        schema_combo_box.setVisible(true);
        
        ArrayList<String> tmp_schemas = db.getSchemas();
        //setting combox list
        tmp_schemas.forEach((i)-> schema_combo_box.addItem(i));
        
        
        db.setCurrentScheme(schema_combo_box.getSelectedItem().toString());
        
        makeTabs();
        
        isItemChanged = true;
        
        //mails
        email_container.setVisible(true);
        send_mails_button.setVisible(true);
        
        fillMailConitainer();
    }
    
    private boolean checkInputFields(){
        String name, password, ip;
        Integer port = 0;
        
        name = username_input.getText();
        password = new String(password_input.getPassword());
        ip = ip_input.getText();

        //username
        if("".equals(name)){
            JOptionPane.showMessageDialog(null, "Error empty username field", "alert", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //password
        if("".equals(password)){
            JOptionPane.showMessageDialog(null, "Error empty password field", "alert", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //port
        try{
            port = Integer.parseInt(port_input.getText());
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Error wrong or empty port field", "alert", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //IP
        if(checkIpRegex(ip)){
            user = new UserData(name, password, ip, port);
            return true;
        }else{
            JOptionPane.showMessageDialog(null, "Error wrong or empty ip field", "alert", JOptionPane.ERROR_MESSAGE);
            return false;
        }     
    }
    
    private boolean checkIpRegex(String line){

      final String pattern = "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";

      // Create a Pattern object
      Pattern r = Pattern.compile(pattern);

      // Now create matcher object.
      Matcher m = r.matcher(line);
        return m.find( );
    }
    
    private void fillMailConitainer(){
        String[][] data = null;
        String[] columnName = {"Emails for sending spam"};
        
        ArrayList<String> mails;
        try {
            mails = db.getMails();
            
            if(mails.size()>0){
                data = new String[mails.size()][1];

                for(int i=0; i<mails.size(); i++){
                    data[i][0] = mails.get(i);
                }
            }           
            
            
            //tab with emails
            email_container.add(new JScrollPane(
                    new JTable(data, columnName)
                    {
                        private static final long serialVersionUID = 1L;
                        
                        public boolean isCellEditable(int row, int column) {                
                                return false;               
                        }
                    }
            ));
            email_container.setTitleAt(0, "emails");
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private void makeTabs(){
        int table_count = db.getCountTables();
        String[] columns, tables = db.getTableNames();
        String[][] data = null;
        
        for(int i=0; i<table_count; i++){
            columns = db.getColumnsNames(tables[i]);
           //jtable getrow error
            for (String column : columns) {
                data = db.getRecords(tables[i], column);
            }
            
            tab_pane.addTab(tables[i], new JScrollPane(new JTable(data, columns)//blocking editing cell by user
                        {
                            private static final long serialVersionUID = 1L;

                            public boolean isCellEditable(int row, int column) {                
                                    return false;               
                            }
                        }
            ));
        }  
        
    }
    
    private void close_connection_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_connection_buttonActionPerformed
        
        isItemChanged = false;
        
        try {
            db.closeConnection();
        } catch (SQLException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        connect_button.setVisible(true);
        close_connection_button.setVisible(false);
        schema_combo_box.setVisible(false);
        schema_combo_box.removeAllItems();
        
        password_input.setText("");
        username_input.setText("");
        
        //mail
        send_mails_button.setVisible(false);
        email_container.setVisible(false);
        
        email_container.removeAll();
        
        clean();
        
    }//GEN-LAST:event_close_connection_buttonActionPerformed

    private void clean(){
        //usuwanie zakładek
        tab_pane.removeAll();  
    }
    private void schema_combo_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schema_combo_boxActionPerformed
        if(isItemChanged){
            db.setCurrentScheme(schema_combo_box.getSelectedItem().toString());
            try {
                db.clearArrays();
                db.updateData();
                clean();
                
                makeTabs();
               // isItemChanged = false;
                
            } catch (SQLException ex) {
                Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_schema_combo_boxActionPerformed

    private void send_mails_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_mails_buttonActionPerformed
        
        try {
            MailSender ms = new MailSender();
            ms.makeEmailList(db.getMails());
            Thread t = new Thread(ms);
            t.start();
        } catch (SQLException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_send_mails_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_connection_button;
    private javax.swing.JButton connect_button;
    private javax.swing.JTabbedPane email_container;
    private javax.swing.JTextField ip_input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField password_input;
    private javax.swing.JTextField port_input;
    private javax.swing.JComboBox<String> schema_combo_box;
    private javax.swing.JButton send_mails_button;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JTextField username_input;
    // End of variables declaration//GEN-END:variables

    
}
